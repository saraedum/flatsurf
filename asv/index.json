{"project": "flatsurf", "project_url": "https://github.com/flatsurf/flatsurf", "show_commit_url": "https://github.com/flatsurf/flatsurf/commit/", "hash_length": 8, "revision_to_hash": {"0": "c9c1a63f7d51f203003aab1a7459bc6bafeb7165"}, "revision_to_date": {"0": 1608143001000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["3.7"], "Cython": ["", null], "arb": [""], "automake": [""], "benchmark==1.5.0": [""], "boost-cpp": [""], "e-antic": [""], "gmp": [""], "gtest": ["", null], "libtool": [""], "make": [""], "benchmark==1.4.1": ["", null], "eigen": ["", null], "libexactreal": ["", null], "ntl": ["", null], "bash": [""], "ccache": [""], "cppyythonizations": [""], "cxx-compiler": [""], "e-antic>=1.0.0rc4": [""], "fmt": [""], "gmpxxll": [""], "gmpxxyy": [""], "libexactreal>=1.3.2": [""], "libintervalxt>=3.0.0": [""], "pyexactreal>=1.3.2": [""], "setuptools": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.7", "arb": "", "automake": "", "bash": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "e-antic>=1.0.0rc4": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "Cython": null, "gtest": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null}], "benchmarks": {"CopyAssignChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CopyAssignChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "CopyAssignChain<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "CopyConstructChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CopyConstructChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "CopyConstructChain<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "CreateChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CreateChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "CreateChain<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipCollapsed<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipCollapsed<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipCollapsed<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipCollapsed<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipUncollapsed<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipUncollapsed<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipUncollapsed<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCollapsedFlipUncollapsed<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCombinatorialFlip.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCombinatorialFlip.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationCombinatorialFlip", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationFlip<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationFlip<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationFlip<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "FlatTriangulationFlip<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "HalfEdgeIndex.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "HalfEdgeIndex.track_time", "param_names": ["param1"], "params": [["'-1'", "'1'"]], "pretty_name": "HalfEdgeIndex", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "MoveChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "MoveChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "MoveChain<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "PathConstructor\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "PathConstructor\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "PathConstructor<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "PathConstructor\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "PathConstructor\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "PathConstructor<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionUnaryMinus\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionUnaryMinus\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "SaddleConnectionUnaryMinus<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionUnaryMinus\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionUnaryMinus\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "SaddleConnectionUnaryMinus<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsByLength\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsByLength\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'64'"]], "pretty_name": "SaddleConnectionsByLength<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsByLength\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsByLength\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'64'"]], "pretty_name": "SaddleConnectionsByLength<Vector<exactreal::Element<exactreal::NumberField>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsLWithSlit\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsLWithSlit\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsLWithSlit<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsLWithSlit\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsLWithSlit\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsLWithSlit<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsL<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsL<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsL<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsL<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "pretty_name": "SaddleConnectionsSampleSquare<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "pretty_name": "SaddleConnectionsSampleSquare<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "pretty_name": "SaddleConnectionsSampleSquare<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "pretty_name": "SaddleConnectionsSampleSquare<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8eantic::renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsSquare<Vector<eantic::renf_elem_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsSquare<Vector<exactreal::Element<exactreal::IntegerRing>>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsSquare<Vector<long long>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "pretty_name": "SaddleConnectionsSquare<Vector<mpq_class>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorArb<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorCcw<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivInt<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorDivMpz<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorEqVector<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorLtBound<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorMinus<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorOrientation<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPerpendicular<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorPlus<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesInt<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesMpz<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorTimesVector<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8eantic::renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8eantic::renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<eantic::renf_elem_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<exactreal::Element<exactreal::IntegerRing>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<exactreal::Element<exactreal::NumberField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal::Element\u27e8exactreal::RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<exactreal::Element<exactreal::RationalField>>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<long long>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<mpq_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "pretty_name": "VectorUnaryMinus<mpz_class>", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VertexAtSource.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VertexAtSource.track_time", "param_names": [], "params": [], "pretty_name": "VertexAtSource", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "VertexAtTarget.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VertexAtTarget.track_time", "param_names": [], "params": [], "pretty_name": "VertexAtTarget", "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}